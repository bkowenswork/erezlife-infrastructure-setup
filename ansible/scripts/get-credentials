#!/usr/bin/env python3

"""
Retrieve credentials needed to provision a server, and place
in the correct paths for ansible.
Ex:
    get-credentials
        -c s3_config.json
        -b bucket-name

NOTES:
    Do not use the full 's3://bucket-name' for the bucket name, the script
    will build that.
"""
import argparse
import asyncio
import json
import os
import subprocess
import sys


async def execute_copy(s3_copy):
    proc = await asyncio.create_subprocess_exec(*s3_copy.cmd)
    await proc.wait()


async def execute_copies(s3_copies):
    coroutines = [execute_copy(s3_copy) for s3_copy in s3_copies]
    await asyncio.gather(*coroutines)


class S3Copy:
    def __init__(self, bucket):
        self.bucket = "s3://%s" % bucket
        self.cmd = [sys.executable, "-m", "awscli", "s3", "cp"]

    def add(self, *args):
        self.cmd.extend(args)

    def run(self):
        subprocess.run(self.cmd, check=True)

    def __repr__(self):
        return self.cmd

    def __str__(self):
        return " ".join(self.cmd)


def parse_args():
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("-c", "--config", required=True)
    parser.add_argument("-b", "--bucket", required=True)
    return parser.parse_args()


def read_config(config):
    with open(config, "r") as f:
        obj = json.load(f)
    return obj


def copy_files(config, bucket):
    source = config["s3"]
    destination = config["ansible"]

    tasks = []
    src = source["directories"]
    dest = destination["directories"]
    for key in src:
        cmd = S3Copy(bucket)
        cmd.add("--recursive")
        cmd.add(os.path.join(cmd.bucket, src[key]))
        cmd.add(dest[key])
        tasks.append(cmd)

    src = source["files"]
    dest = destination["files"]
    for key in src:
        cmd = S3Copy(bucket)
        cmd.add(os.path.join(cmd.bucket, src[key]))
        cmd.add(dest[key])
        tasks.append(cmd)

    asyncio.run(execute_copies(tasks))

    for key in src:
        os.chmod(dest[key], 0o600)


def main():
    args = parse_args()
    config = read_config(args.config)
    copy_files(config, args.bucket)


if __name__ == "__main__":
    main()
